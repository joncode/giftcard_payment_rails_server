require 'rest_client'

# Questions :

# 	what is the merchant Site ID
# 	what is the posreferernce - is it the same value as TransactionReference
	# or is it Unique string generated by the POS
# Identifier is unique gift/redemption ID in our system - why do I need this ?

# zapper ID on payment is unique customer reference but on response its unique transaction identifier
# paymentID is a zapper system reference & a ref used for refund , is that accurate  ?
# what does the syncronous resonse look like
# does I have to send in  a loction identifier or a tender type key identifer or does the qr code handle that , ie is qr code unique for all locations ?


class OpsZapper
	include MoneyHelper

	if Rails.env.production?
		ZAPPER_NOTIFY_URL = "https://api.itson.me/events/callbacks/zappernotify"
	else
		ZAPPER_NOTIFY_URL = "https://qaapi.itson.me/events/callbacks/zappernotify"
	end

#   -------------

	attr_accessor :value, :ccy, :customer, :qr_code, :gift_card_id, :transaction_ref, :code, :applied_value, :ticket_id,
		 :response, :extra_value, :extra_gift, :check_value

	def initialize args
		# args = { "qr_code" => qr_code, "gift_card_id" => gift.obscured_id,
		#  "value" => new_value, "ccy" => gift.ccy, "gift" => gift }
		@code = 100
		@qr_code = args['qr_code']
		@gift_card_id = args['gift_card_id']
		@value 			 = args['value'].to_i
		@applied_value 	 = 0
		@extra_value     = 0
		@extra_gift      = 0
		@check_value 	 = 0
		@ccy = args['ccy']
		@customer = args['customer']
		@transaction_ref = "Redemption-#{args['redemption_id']}"
		@ticket_id = nil
		@response = response_from_code
	end

	def success?
		(200..299).cover?(@code)
	end

#   -------------

	def self.make_request_hsh gift, qr_code, value
		{
			"qr_code" => qr_code,
            "gift_card_id" => gift.obscured_id,
            "value" => value,
            "ccy" => gift.ccy,
            'customer' => customer(gift.receiver)
        }
	end

	def self.customer user
		{
			"FirstName" => user.first_name,
			"LastName" => user.last_name,
			"PhoneNumber" => user.phone,
			"CountryISOCode" => 'US',
			"EmailAddress" => user.email
		}
	end

#   -------------

	def redeem_gift
		route = "payments/CreateCustomerAndInitiatePayment"
		payload = payment
		post_zapper route, payload
		return @response = response_from_code
	end

	def check_result
		merchantsiteid = "Merchant Site ID"
		posReference = "ItsOnMe unique reference"
		route = "payments/GetMultiplePaymentStatusByPosReferences?merchantsiteId=#{merchantsiteid}&posreference=#{posReference}"
		get_zapper route
	end

#   -------------

	def payment qr_code=@qr_code, transaction_ref=@transaction_ref, customer=@customer
		{
				# IOM Unique transaction reference number
		 	"TransactionReference" => transaction_ref,
		 		# Base64 encoded QR code string
			"QRCode" => qr_code,
				# URL to send payment status after completion
			"NotificationUrl" => ZAPPER_NOTIFY_URL,
			"Customer" => customer,
			"Vouchers" => [ voucher ]
		}

	end

	def voucher value=@value, ccy=@ccy, gift_card_id=@gift_card_id
		{
				# Identifier is unique gift/redemption ID in our system
			"Identifier" => "Gift-#{gift_card_id}",
				# customer readable gift/redemption description
			"Description" => "ItsOnMe-Gift-#{gift_card_id}",
				# amount in cents
			"Amount" => value,
				# ccy iso code - ISO 3166 (ALPHA-3)
			"CurrencyISOCode" => ccy
		}
	end

#   -------------

	def post_zapper route, payload
		puts "\n ZAPPER payload = #{payload}\n"
		resp = {
				# Action indicator None = 1, RedirectToZapper = 2
			"ActionIndicator" => 2,
				# MerchantSite Identifier
			"MerchantSiteId" => 12,
			"ErrorDescription" => nil,
			"OriginalAmount" => 2600,
			"VoucherAmount" => 3700,
			"RequiredAmount" => 200,
			"CurrencyISOCode" => "USD",
				#  unique Zapper Transaction Identifier
			"ZapperId" => "HLVZRWTUBP7L",
				#  ID to be used for refunds
			"PaymentId" => 785123,
				# IOM Unique transaction reference number
			"TransactionReference" => "6ae8b2cf-9efd-4881-8387-746487aa3518"
		}
		apply_ticket_value(resp)
		# begin
		# 	response = RestClient.post(
		# 	    "#{ZAPPER_API_URL}/#{route}",
		# 	    payload,
		# 	    { :content_type => :json, :'Bearer' => ZAPPER_API_KEY }
		# 	)
  #           puts "\n Here is ZAPPER response #{response.inspect}\n\n"
  #           resp = JSON.parse response
  #           apply_ticket_value(resp)
  #           # return resp
		# rescue => e
  #           puts "\n 500 Internal ZAPPER Error code = #{e.inspect}\n\n"
  #           if e.nil?
  #           	@code = 400
  #           else
  #           	if e.http_code == 401
  #           		@code = 400
  #           	else
  #           		@code = e.http_code
  #           	end
  #           end
		# end
	end

    def get_zapper route
        begin
            response = RestClient.get(
                "#{ZAPPER_API_URL}/#{route}",
                { :content_type => :json, :'Api-Key' => ZAPPER_API_KEY }
            )
            puts "\n Here is ZAPPER response #{response.inspect}\n\n"
            resp = JSON.parse response
            apply_ticket_value(resp)
            return resp
        rescue => e
            puts "\n 500 Internal ZAPPER Error code = #{e.inspect}\n\n"
            if e.nil?
            	@code = 400
                response = { "response_code" => "ERROR", "response_text" => 'Contact Support', "code" => 400, "data" => [] }
                return { status: 0, data: RestError.new(r: response), res: response }
            else
            	@code = e.http_code
                return { status: 0, data: RestError.new(e: e), error: e }
            end
        end
    end

#   -------------


	def apply_ticket_value resp
		@ticket_id = resp['ZapperId']
		@check_value = resp['VoucherAmount'].to_i
		if @value < @check_value
			@code			= 206   # ok , the gift has partially covered the ticket cost
			@extra_value	= @check_value - @value
			@applied_value	= @value
		elsif @value > @check_value
			@code			= 201    # ok , a new gift has been created for the extra gift value
			@extra_gift	    = @value - @check_value
			@applied_value	= @check_value
		else
			@code  = 200   # ok , full aceeptance
			@applied_value	= @value
		end
	end

	def response_from_code
		case @code
		when 100
			r_code = "OPEN"
			r_text = "Gift has not been redeemed yet."
		when 200
			r_code = "PAID"
			r_text = "#{display_money(cents: @value, ccy: @ccy)} was applied to your check. Transaction completed."
		when 201
			r_code = "OVER_PAID"
			r_text = "Your gift exceeded the check value. Your gift has a balance of #{display_money(cents: @extra_gift, ccy: @ccy)}."
		when 206
			r_code = "APPLIED"
			r_text = "#{display_money(cents: @value, ccy: @ccy)} was applied to your check. A total of #{display_money(cents: @extra_value, ccy: @ccy)} remains to be paid."
		when 304
			r_code = "ERROR"
			r_text = "Check Number #{@ticket_id} has already been paid."
		when 400
				# this could be an authorization error with zapper (401) - must fix bearer auth
				# OpsTwilio.text_devs msg: "400 Error on Zapper"
			r_code = "ERROR"
			r_text = "Internal Error Point of Sale System Unavailable. Please try again later or contact support@itson.me"
		when 404
			r_code = "ERROR"
			r_text = "Your QR code cannot be found. Please re-scan and try again. If this issue persists please contact support@itson.me"
		when 401
			r_code = "ERROR"
			r_text = "This gift card is only redeemable for the exact item mentioned. Please order the correct item to use this gift card."
		when 500
			r_code = "ERROR"
			r_text = "Internal Error Point of Sale System Unavailable. Please try again later or contact support@itson.me"
		when 503
			r_code = "ERROR"
			r_text = "Merchant Point of Sale System Unavailable.  Please try again after a few minutes."
		when 509
			r_code = "ERROR"
			r_text = "Merchant Server Unavailable.  Please try again later."
		else
				# this is an authorization error with zapper - must fix bearer auth
				# OpsTwilio.text_devs msg: "Unknown Error on Zapper"
			r_code = "ERROR"
			r_text = "Server Error.  Please try again later"
		end
		if success?
			success_value = true
			hsh = success_hsh
			hsh[:msg] = r_text
			response_data = hsh
		else
			success_value = false
			response_data = r_text
		end
		{ "response_code" => r_code, "response_text" => response_data, 'success' => success_value }
	end

	def success_hsh
		{
            amount_applied: @applied_value,
            total_check_amount: @check_value,
            remaining_check_balance: @extra_value,
            remaining_gift_balance: @extra_gift
		}
	end

end
# https://2.zap.pe

# ------------------------        CREATE PAYMENT

# route -> ZAPPER_API_URL/payments/CreateCustomerAndInitiatePayment



# ------------------------               POLL FOR RESPONSE


# route -> ZAPPER_API_URL/payments/GetMultiplePaymentStatusByPosReferences?merchantsiteId={merchantsiteID}&posreference={posReference}
